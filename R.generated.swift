//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `BookingRequestVC`, and contains static references to 1 segues.
    struct bookingRequestVC {
      /// Segue identifier `IdentifierCopouns`.
      static let identifierCopouns: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BookingRequestVC, CouponContainerVC> = Rswift.StoryboardSegueIdentifier(identifier: "IdentifierCopouns")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `IdentifierCopouns`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func identifierCopouns(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BookingRequestVC, CouponContainerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.bookingRequestVC.identifierCopouns, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BackGround`.
    static let backGround = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackGround")
    /// Color `Dark`.
    static let dark = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dark")
    /// Color `buttonColor`.
    static let buttonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackGround", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backGround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Dark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackGround", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backGround(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backGround.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Dark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let comAppleDeveloperApsEnvironment = infoPlistString(path: [], key: "com.apple.developer.aps-environment") ?? "development"
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityNetworkClient = true

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 146 images.
  struct image {
    /// Image `Checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checked")
    /// Image `Cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cross")
    /// Image `DownArrow 1`.
    static let downArrow1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "DownArrow 1")
    /// Image `Google30`.
    static let google30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Google30")
    /// Image `Home24`.
    static let home24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home24")
    /// Image `Location1`.
    static let location1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Location1")
    /// Image `LogOutREd`.
    static let logOutREd = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogOutREd")
    /// Image `Placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder")
    /// Image `Plus24`.
    static let plus24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus24")
    /// Image `PlusNew`.
    static let plusNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlusNew")
    /// Image `Splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash")
    /// Image `Uncheck1`.
    static let uncheck1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Uncheck1")
    /// Image `Uncheck`.
    static let uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "Uncheck")
    /// Image `Wallet1`.
    static let wallet1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wallet1")
    /// Image `app_icon_2`.
    static let app_icon_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_icon_2")
    /// Image `app_icon`.
    static let app_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_icon")
    /// Image `apple`.
    static let apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple")
    /// Image `arroimg`.
    static let arroimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "arroimg")
    /// Image `bag`.
    static let bag = Rswift.ImageResource(bundle: R.hostingBundle, name: "bag")
    /// Image `black_back`.
    static let black_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_back")
    /// Image `bookinghistory`.
    static let bookinghistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookinghistory")
    /// Image `button_img`.
    static let button_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_img")
    /// Image `calander`.
    static let calander = Rswift.ImageResource(bundle: R.hostingBundle, name: "calander")
    /// Image `call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "call")
    /// Image `cart_img`.
    static let cart_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_img")
    /// Image `cartimg2`.
    static let cartimg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartimg2")
    /// Image `cartimg3`.
    static let cartimg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartimg3")
    /// Image `cartimg`.
    static let cartimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartimg")
    /// Image `catic`.
    static let catic = Rswift.ImageResource(bundle: R.hostingBundle, name: "catic")
    /// Image `chat_active`.
    static let chat_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_active")
    /// Image `chat_deactive`.
    static let chat_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_deactive")
    /// Image `chemicaltools`.
    static let chemicaltools = Rswift.ImageResource(bundle: R.hostingBundle, name: "chemicaltools")
    /// Image `cleaner`.
    static let cleaner = Rswift.ImageResource(bundle: R.hostingBundle, name: "cleaner")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `col_notibell`.
    static let col_notibell = Rswift.ImageResource(bundle: R.hostingBundle, name: "col_notibell")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `contactus`.
    static let contactus = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactus")
    /// Image `cycling`.
    static let cycling = Rswift.ImageResource(bundle: R.hostingBundle, name: "cycling")
    /// Image `dateic`.
    static let dateic = Rswift.ImageResource(bundle: R.hostingBundle, name: "dateic")
    /// Image `delete24`.
    static let delete24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete24")
    /// Image `delete30`.
    static let delete30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete30")
    /// Image `delete_ic`.
    static let delete_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_ic")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `downarrow`.
    static let downarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarrow")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `dummy_user`.
    static let dummy_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_user")
    /// Image `edit_new`.
    static let edit_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_new")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `feed_active`.
    static let feed_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_active")
    /// Image `feed_deactive`.
    static let feed_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_deactive")
    /// Image `feedback`.
    static let feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedback")
    /// Image `filter_ic`.
    static let filter_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ic")
    /// Image `findbuddy_active`.
    static let findbuddy_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_active")
    /// Image `findbuddy_deactive`.
    static let findbuddy_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_deactive")
    /// Image `fitmarket_active`.
    static let fitmarket_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_active")
    /// Image `fitmarket_deactive`.
    static let fitmarket_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_deactive")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `full_img`.
    static let full_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_img")
    /// Image `girl_two`.
    static let girl_two = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl_two")
    /// Image `girl`.
    static let girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `greychat`.
    static let greychat = Rswift.ImageResource(bundle: R.hostingBundle, name: "greychat")
    /// Image `heart_dislike`.
    static let heart_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_dislike")
    /// Image `heart_like`.
    static let heart_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_like")
    /// Image `helpandsupport`.
    static let helpandsupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpandsupport")
    /// Image `history_active`.
    static let history_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "history_active")
    /// Image `history_deactive`.
    static let history_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "history_deactive")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `home_active`.
    static let home_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_active")
    /// Image `home_back`.
    static let home_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_back")
    /// Image `home_deactive`.
    static let home_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_deactive")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `img_twp`.
    static let img_twp = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_twp")
    /// Image `invvite`.
    static let invvite = Rswift.ImageResource(bundle: R.hostingBundle, name: "invvite")
    /// Image `itemimage`.
    static let itemimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "itemimage")
    /// Image `journal_activity`.
    static let journal_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "journal_activity")
    /// Image `last_trans`.
    static let last_trans = Rswift.ImageResource(bundle: R.hostingBundle, name: "last_trans")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `location_active`.
    static let location_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_active")
    /// Image `locationic`.
    static let locationic = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationic")
    /// Image `login_back`.
    static let login_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_back")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `maid`.
    static let maid = Rswift.ImageResource(bundle: R.hostingBundle, name: "maid")
    /// Image `menu_horizontal`.
    static let menu_horizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_horizontal")
    /// Image `menu_vertical`.
    static let menu_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_vertical")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `myaddress`.
    static let myaddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "myaddress")
    /// Image `mybooking`.
    static let mybooking = Rswift.ImageResource(bundle: R.hostingBundle, name: "mybooking")
    /// Image `myfav`.
    static let myfav = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfav")
    /// Image `myfeed`.
    static let myfeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfeed")
    /// Image `mypost`.
    static let mypost = Rswift.ImageResource(bundle: R.hostingBundle, name: "mypost")
    /// Image `nearbuddy`.
    static let nearbuddy = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearbuddy")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `offer2`.
    static let offer2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer2")
    /// Image `offer3`.
    static let offer3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer3")
    /// Image `offerimg1`.
    static let offerimg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "offerimg1")
    /// Image `password1`.
    static let password1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "password1")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `plus_active`.
    static let plus_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_active")
    /// Image `plus_deactive`.
    static let plus_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_deactive")
    /// Image `plus_only`.
    static let plus_only = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_only")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `post_img`.
    static let post_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_img")
    /// Image `privacy_policy`.
    static let privacy_policy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy_policy")
    /// Image `profile_active`.
    static let profile_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_active")
    /// Image `profile_activec`.
    static let profile_activec = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_activec")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `ranking_active`.
    static let ranking_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_active")
    /// Image `ranking_deactive`.
    static let ranking_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_deactive")
    /// Image `rateme_active`.
    static let rateme_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateme_active")
    /// Image `rateme_deacitive`.
    static let rateme_deacitive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateme_deacitive")
    /// Image `rateuser_active`.
    static let rateuser_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateuser_active")
    /// Image `rateuser_deactive`.
    static let rateuser_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateuser_deactive")
    /// Image `rateusers_active`.
    static let rateusers_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateusers_active")
    /// Image `rateusers_deactive`.
    static let rateusers_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateusers_deactive")
    /// Image `referfriend`.
    static let referfriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "referfriend")
    /// Image `roundicon`.
    static let roundicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "roundicon")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `selectitem`.
    static let selectitem = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectitem")
    /// Image `sendmessage`.
    static let sendmessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendmessage")
    /// Image `setting_active`.
    static let setting_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_active")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `settings_deactive`.
    static let settings_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_deactive")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `sharefriend`.
    static let sharefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharefriend")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `slide_4`.
    static let slide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_4")
    /// Image `splash_back`.
    static let splash_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_back")
    /// Image `steaming`.
    static let steaming = Rswift.ImageResource(bundle: R.hostingBundle, name: "steaming")
    /// Image `subscribe`.
    static let subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscribe")
    /// Image `subscription`.
    static let subscription = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription")
    /// Image `terms_conditions`.
    static let terms_conditions = Rswift.ImageResource(bundle: R.hostingBundle, name: "terms_conditions")
    /// Image `unlike`.
    static let unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `user_black`.
    static let user_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_black")
    /// Image `vacumcleaner`.
    static let vacumcleaner = Rswift.ImageResource(bundle: R.hostingBundle, name: "vacumcleaner")
    /// Image `viewpagimage`.
    static let viewpagimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "viewpagimage")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `whatsapp`.
    static let whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "whatsapp")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DownArrow 1", bundle: ..., traitCollection: ...)`
    static func downArrow1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Google30", bundle: ..., traitCollection: ...)`
    static func google30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home24", bundle: ..., traitCollection: ...)`
    static func home24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Location1", bundle: ..., traitCollection: ...)`
    static func location1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LogOutREd", bundle: ..., traitCollection: ...)`
    static func logOutREd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logOutREd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus24", bundle: ..., traitCollection: ...)`
    static func plus24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlusNew", bundle: ..., traitCollection: ...)`
    static func plusNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Uncheck", bundle: ..., traitCollection: ...)`
    static func uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Uncheck1", bundle: ..., traitCollection: ...)`
    static func uncheck1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Wallet1", bundle: ..., traitCollection: ...)`
    static func wallet1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_icon", bundle: ..., traitCollection: ...)`
    static func app_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_icon_2", bundle: ..., traitCollection: ...)`
    static func app_icon_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_icon_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple", bundle: ..., traitCollection: ...)`
    static func apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arroimg", bundle: ..., traitCollection: ...)`
    static func arroimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arroimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bag", bundle: ..., traitCollection: ...)`
    static func bag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_back", bundle: ..., traitCollection: ...)`
    static func black_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookinghistory", bundle: ..., traitCollection: ...)`
    static func bookinghistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookinghistory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_img", bundle: ..., traitCollection: ...)`
    static func button_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calander", bundle: ..., traitCollection: ...)`
    static func calander(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calander, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_img", bundle: ..., traitCollection: ...)`
    static func cart_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartimg", bundle: ..., traitCollection: ...)`
    static func cartimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartimg2", bundle: ..., traitCollection: ...)`
    static func cartimg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartimg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartimg3", bundle: ..., traitCollection: ...)`
    static func cartimg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartimg3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "catic", bundle: ..., traitCollection: ...)`
    static func catic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_active", bundle: ..., traitCollection: ...)`
    static func chat_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_deactive", bundle: ..., traitCollection: ...)`
    static func chat_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chemicaltools", bundle: ..., traitCollection: ...)`
    static func chemicaltools(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chemicaltools, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cleaner", bundle: ..., traitCollection: ...)`
    static func cleaner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleaner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "col_notibell", bundle: ..., traitCollection: ...)`
    static func col_notibell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.col_notibell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactus", bundle: ..., traitCollection: ...)`
    static func contactus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cycling", bundle: ..., traitCollection: ...)`
    static func cycling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cycling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dateic", bundle: ..., traitCollection: ...)`
    static func dateic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dateic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete24", bundle: ..., traitCollection: ...)`
    static func delete24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete30", bundle: ..., traitCollection: ...)`
    static func delete30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_ic", bundle: ..., traitCollection: ...)`
    static func delete_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarrow", bundle: ..., traitCollection: ...)`
    static func downarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummy_user", bundle: ..., traitCollection: ...)`
    static func dummy_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_new", bundle: ..., traitCollection: ...)`
    static func edit_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_active", bundle: ..., traitCollection: ...)`
    static func feed_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_deactive", bundle: ..., traitCollection: ...)`
    static func feed_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedback", bundle: ..., traitCollection: ...)`
    static func feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_ic", bundle: ..., traitCollection: ...)`
    static func filter_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_active", bundle: ..., traitCollection: ...)`
    static func findbuddy_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_deactive", bundle: ..., traitCollection: ...)`
    static func findbuddy_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_active", bundle: ..., traitCollection: ...)`
    static func fitmarket_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_deactive", bundle: ..., traitCollection: ...)`
    static func fitmarket_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "full_img", bundle: ..., traitCollection: ...)`
    static func full_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "girl", bundle: ..., traitCollection: ...)`
    static func girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "girl_two", bundle: ..., traitCollection: ...)`
    static func girl_two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl_two, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greychat", bundle: ..., traitCollection: ...)`
    static func greychat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greychat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_dislike", bundle: ..., traitCollection: ...)`
    static func heart_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_like", bundle: ..., traitCollection: ...)`
    static func heart_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpandsupport", bundle: ..., traitCollection: ...)`
    static func helpandsupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpandsupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history_active", bundle: ..., traitCollection: ...)`
    static func history_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history_deactive", bundle: ..., traitCollection: ...)`
    static func history_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_active", bundle: ..., traitCollection: ...)`
    static func home_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_back", bundle: ..., traitCollection: ...)`
    static func home_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_deactive", bundle: ..., traitCollection: ...)`
    static func home_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_twp", bundle: ..., traitCollection: ...)`
    static func img_twp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_twp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invvite", bundle: ..., traitCollection: ...)`
    static func invvite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invvite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "itemimage", bundle: ..., traitCollection: ...)`
    static func itemimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.itemimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "journal_activity", bundle: ..., traitCollection: ...)`
    static func journal_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.journal_activity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "last_trans", bundle: ..., traitCollection: ...)`
    static func last_trans(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.last_trans, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_active", bundle: ..., traitCollection: ...)`
    static func location_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationic", bundle: ..., traitCollection: ...)`
    static func locationic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_back", bundle: ..., traitCollection: ...)`
    static func login_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maid", bundle: ..., traitCollection: ...)`
    static func maid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_horizontal", bundle: ..., traitCollection: ...)`
    static func menu_horizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_horizontal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_vertical", bundle: ..., traitCollection: ...)`
    static func menu_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_vertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myaddress", bundle: ..., traitCollection: ...)`
    static func myaddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myaddress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mybooking", bundle: ..., traitCollection: ...)`
    static func mybooking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mybooking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfav", bundle: ..., traitCollection: ...)`
    static func myfav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfeed", bundle: ..., traitCollection: ...)`
    static func myfeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfeed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mypost", bundle: ..., traitCollection: ...)`
    static func mypost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mypost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearbuddy", bundle: ..., traitCollection: ...)`
    static func nearbuddy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearbuddy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer2", bundle: ..., traitCollection: ...)`
    static func offer2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer3", bundle: ..., traitCollection: ...)`
    static func offer3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offerimg1", bundle: ..., traitCollection: ...)`
    static func offerimg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offerimg1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password1", bundle: ..., traitCollection: ...)`
    static func password1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_active", bundle: ..., traitCollection: ...)`
    static func plus_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_deactive", bundle: ..., traitCollection: ...)`
    static func plus_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_only", bundle: ..., traitCollection: ...)`
    static func plus_only(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_only, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_img", bundle: ..., traitCollection: ...)`
    static func post_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy_policy", bundle: ..., traitCollection: ...)`
    static func privacy_policy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy_policy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_active", bundle: ..., traitCollection: ...)`
    static func profile_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_activec", bundle: ..., traitCollection: ...)`
    static func profile_activec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_activec, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_active", bundle: ..., traitCollection: ...)`
    static func ranking_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_deactive", bundle: ..., traitCollection: ...)`
    static func ranking_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateme_active", bundle: ..., traitCollection: ...)`
    static func rateme_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateme_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateme_deacitive", bundle: ..., traitCollection: ...)`
    static func rateme_deacitive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateme_deacitive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateuser_active", bundle: ..., traitCollection: ...)`
    static func rateuser_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateuser_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateuser_deactive", bundle: ..., traitCollection: ...)`
    static func rateuser_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateuser_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateusers_active", bundle: ..., traitCollection: ...)`
    static func rateusers_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateusers_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateusers_deactive", bundle: ..., traitCollection: ...)`
    static func rateusers_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateusers_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "referfriend", bundle: ..., traitCollection: ...)`
    static func referfriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.referfriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "roundicon", bundle: ..., traitCollection: ...)`
    static func roundicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectitem", bundle: ..., traitCollection: ...)`
    static func selectitem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectitem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendmessage", bundle: ..., traitCollection: ...)`
    static func sendmessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendmessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_active", bundle: ..., traitCollection: ...)`
    static func setting_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_deactive", bundle: ..., traitCollection: ...)`
    static func settings_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharefriend", bundle: ..., traitCollection: ...)`
    static func sharefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_4", bundle: ..., traitCollection: ...)`
    static func slide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_back", bundle: ..., traitCollection: ...)`
    static func splash_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "steaming", bundle: ..., traitCollection: ...)`
    static func steaming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.steaming, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscribe", bundle: ..., traitCollection: ...)`
    static func subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscribe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscription", bundle: ..., traitCollection: ...)`
    static func subscription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscription, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "terms_conditions", bundle: ..., traitCollection: ...)`
    static func terms_conditions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.terms_conditions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlike", bundle: ..., traitCollection: ...)`
    static func unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_black", bundle: ..., traitCollection: ...)`
    static func user_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vacumcleaner", bundle: ..., traitCollection: ...)`
    static func vacumcleaner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vacumcleaner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "viewpagimage", bundle: ..., traitCollection: ...)`
    static func viewpagimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.viewpagimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whatsapp", bundle: ..., traitCollection: ...)`
    static func whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsapp, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `AdressCell`.
    static let adressCell = _R.nib._AdressCell()
    /// Nib `BookingCell`.
    static let bookingCell = _R.nib._BookingCell()
    /// Nib `CleaningCell`.
    static let cleaningCell = _R.nib._CleaningCell()
    /// Nib `DayCell`.
    static let dayCell = _R.nib._DayCell()
    /// Nib `HistoryCell`.
    static let historyCell = _R.nib._HistoryCell()
    /// Nib `LeftMenuCell`.
    static let leftMenuCell = _R.nib._LeftMenuCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `OfferCell`.
    static let offerCell = _R.nib._OfferCell()
    /// Nib `PendingCell`.
    static let pendingCell = _R.nib._PendingCell()
    /// Nib `ServiceCell`.
    static let serviceCell = _R.nib._ServiceCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AdressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.adressCell) instead")
    static func adressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingCell) instead")
    static func bookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CleaningCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cleaningCell) instead")
    static func cleaningCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cleaningCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DayCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dayCell) instead")
    static func dayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dayCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyCell) instead")
    static func historyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LeftMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leftMenuCell) instead")
    static func leftMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerCell) instead")
    static func offerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PendingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pendingCell) instead")
    static func pendingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pendingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.serviceCell) instead")
    static func serviceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceCell)
    }
    #endif

    static func adressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdressCell? {
      return R.nib.adressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdressCell
    }

    static func bookingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCell? {
      return R.nib.bookingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
    }

    static func cleaningCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CleaningCell? {
      return R.nib.cleaningCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CleaningCell
    }

    static func dayCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DayCell? {
      return R.nib.dayCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DayCell
    }

    static func historyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryCell? {
      return R.nib.historyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryCell
    }

    static func leftMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftMenuCell? {
      return R.nib.leftMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftMenuCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func offerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferCell? {
      return R.nib.offerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferCell
    }

    static func pendingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PendingCell? {
      return R.nib.pendingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PendingCell
    }

    static func serviceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCell? {
      return R.nib.serviceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 11 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AdressCell`.
    static let adressCell: Rswift.ReuseIdentifier<AdressCell> = Rswift.ReuseIdentifier(identifier: "AdressCell")
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `CleaningCell`.
    static let cleaningCell: Rswift.ReuseIdentifier<CleaningCell> = Rswift.ReuseIdentifier(identifier: "CleaningCell")
    /// Reuse identifier `DayCell`.
    static let dayCell: Rswift.ReuseIdentifier<DayCell> = Rswift.ReuseIdentifier(identifier: "DayCell")
    /// Reuse identifier `HistoryCell`.
    static let historyCell: Rswift.ReuseIdentifier<HistoryCell> = Rswift.ReuseIdentifier(identifier: "HistoryCell")
    /// Reuse identifier `LeftMenuCell`.
    static let leftMenuCell: Rswift.ReuseIdentifier<LeftMenuCell> = Rswift.ReuseIdentifier(identifier: "LeftMenuCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `OfferCell`.
    static let offerCell: Rswift.ReuseIdentifier<OfferCell> = Rswift.ReuseIdentifier(identifier: "OfferCell")
    /// Reuse identifier `PendingCell`.
    static let pendingCell: Rswift.ReuseIdentifier<PendingCell> = Rswift.ReuseIdentifier(identifier: "PendingCell")
    /// Reuse identifier `ServiceCell`.
    static let serviceCell: Rswift.ReuseIdentifier<ServiceCell> = Rswift.ReuseIdentifier(identifier: "ServiceCell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AdressCell.validate()
      try _CleaningCell.validate()
      try _DayCell.validate()
      try _OfferCell.validate()
      try _ServiceCell.validate()
    }

    struct _AdressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AdressCell

      let bundle = R.hostingBundle
      let identifier = "AdressCell"
      let name = "AdressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdressCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete24' is used in nib 'AdressCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in nib 'AdressCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BookingCell

      let bundle = R.hostingBundle
      let identifier = "BookingCell"
      let name = "BookingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
      }

      fileprivate init() {}
    }

    struct _CleaningCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CleaningCell

      let bundle = R.hostingBundle
      let identifier = "CleaningCell"
      let name = "CleaningCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CleaningCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CleaningCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Uncheck1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Uncheck1' is used in nib 'CleaningCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DayCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DayCell

      let bundle = R.hostingBundle
      let identifier = "DayCell"
      let name = "DayCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DayCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Uncheck1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Uncheck1' is used in nib 'DayCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HistoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HistoryCell

      let bundle = R.hostingBundle
      let identifier = "HistoryCell"
      let name = "HistoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryCell
      }

      fileprivate init() {}
    }

    struct _LeftMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LeftMenuCell

      let bundle = R.hostingBundle
      let identifier = "LeftMenuCell"
      let name = "LeftMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftMenuCell
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationCell

      let bundle = R.hostingBundle
      let identifier = "NotificationCell"
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      fileprivate init() {}
    }

    struct _OfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferCell

      let bundle = R.hostingBundle
      let identifier = "OfferCell"
      let name = "OfferCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "offerimg1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'offerimg1' is used in nib 'OfferCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in nib 'OfferCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PendingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PendingCell

      let bundle = R.hostingBundle
      let identifier = "PendingCell"
      let name = "PendingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PendingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PendingCell
      }

      fileprivate init() {}
    }

    struct _ServiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ServiceCell

      let bundle = R.hostingBundle
      let identifier = "ServiceCell"
      let name = "ServiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Uncheck1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Uncheck1' is used in nib 'ServiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "steaming", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'steaming' is used in nib 'ServiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addAdressVC = StoryboardViewControllerResource<AddAdressVC>(identifier: "AddAdressVC")
      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let billPaymentVC = StoryboardViewControllerResource<BillPaymentVC>(identifier: "BillPaymentVC")
      let bookingDetailsVC = StoryboardViewControllerResource<BookingDetailsVC>(identifier: "BookingDetailsVC")
      let bookingHistoryVC = StoryboardViewControllerResource<BookingHistoryVC>(identifier: "BookingHistoryVC")
      let bookingRequestVC = StoryboardViewControllerResource<BookingRequestVC>(identifier: "BookingRequestVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let contactVC = StoryboardViewControllerResource<ContactVC>(identifier: "ContactVC")
      let couponContainerVC = StoryboardViewControllerResource<CouponContainerVC>(identifier: "CouponContainerVC")
      let dateTimeVC = StoryboardViewControllerResource<DateTimeVC>(identifier: "DateTimeVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let leftMenuVC = StoryboardViewControllerResource<LeftMenuVC>(identifier: "LeftMenuVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let myBookingVC = StoryboardViewControllerResource<MyBookingVC>(identifier: "MyBookingVC")
      let name = "Main"
      let notififcationVC = StoryboardViewControllerResource<NotififcationVC>(identifier: "NotififcationVC")
      let optionSlotVC = StoryboardViewControllerResource<OptionSlotVC>(identifier: "OptionSlotVC")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let pendingBillVC = StoryboardViewControllerResource<PendingBillVC>(identifier: "PendingBillVC")
      let presentCancelVC = StoryboardViewControllerResource<PresentCancelVC>(identifier: "PresentCancelVC")
      let presentDeleteVC = StoryboardViewControllerResource<PresentDeleteVC>(identifier: "PresentDeleteVC")
      let referFriendVC = StoryboardViewControllerResource<ReferFriendVC>(identifier: "ReferFriendVC")
      let savedAddressVC = StoryboardViewControllerResource<SavedAddressVC>(identifier: "SavedAddressVC")
      let signUpVC = StoryboardViewControllerResource<SignUpVC>(identifier: "SignUpVC")
      let termsNConditionVC = StoryboardViewControllerResource<TermsNConditionVC>(identifier: "TermsNConditionVC")
      let walletContainerVC = StoryboardViewControllerResource<WalletContainerVC>(identifier: "WalletContainerVC")
      let walletVC = StoryboardViewControllerResource<WalletVC>(identifier: "WalletVC")

      func addAdressVC(_: Void = ()) -> AddAdressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAdressVC)
      }

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func billPaymentVC(_: Void = ()) -> BillPaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: billPaymentVC)
      }

      func bookingDetailsVC(_: Void = ()) -> BookingDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingDetailsVC)
      }

      func bookingHistoryVC(_: Void = ()) -> BookingHistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingHistoryVC)
      }

      func bookingRequestVC(_: Void = ()) -> BookingRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingRequestVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func contactVC(_: Void = ()) -> ContactVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactVC)
      }

      func couponContainerVC(_: Void = ()) -> CouponContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: couponContainerVC)
      }

      func dateTimeVC(_: Void = ()) -> DateTimeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dateTimeVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func leftMenuVC(_: Void = ()) -> LeftMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftMenuVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func myBookingVC(_: Void = ()) -> MyBookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookingVC)
      }

      func notififcationVC(_: Void = ()) -> NotififcationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notififcationVC)
      }

      func optionSlotVC(_: Void = ()) -> OptionSlotVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: optionSlotVC)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func pendingBillVC(_: Void = ()) -> PendingBillVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pendingBillVC)
      }

      func presentCancelVC(_: Void = ()) -> PresentCancelVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentCancelVC)
      }

      func presentDeleteVC(_: Void = ()) -> PresentDeleteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentDeleteVC)
      }

      func referFriendVC(_: Void = ()) -> ReferFriendVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referFriendVC)
      }

      func savedAddressVC(_: Void = ()) -> SavedAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: savedAddressVC)
      }

      func signUpVC(_: Void = ()) -> SignUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }

      func termsNConditionVC(_: Void = ()) -> TermsNConditionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsNConditionVC)
      }

      func walletContainerVC(_: Void = ()) -> WalletContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletContainerVC)
      }

      func walletVC(_: Void = ()) -> WalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "DownArrow 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DownArrow 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Google30", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Google30' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Location1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Location1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogOutREd", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogOutREd' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Uncheck1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Uncheck1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "app_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'apple' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bookinghistory", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bookinghistory' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calander", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calander' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'call' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "cleaner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cleaner' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "col_notibell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'col_notibell' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drawer_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drawer_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'maid' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "referfriend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'referfriend' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uparrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uparrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "whatsapp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'whatsapp' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackGround", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackGround' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addAdressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAdressVC' could not be loaded from storyboard 'Main' as 'AddAdressVC'.") }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().billPaymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'billPaymentVC' could not be loaded from storyboard 'Main' as 'BillPaymentVC'.") }
        if _R.storyboard.main().bookingDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingDetailsVC' could not be loaded from storyboard 'Main' as 'BookingDetailsVC'.") }
        if _R.storyboard.main().bookingHistoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingHistoryVC' could not be loaded from storyboard 'Main' as 'BookingHistoryVC'.") }
        if _R.storyboard.main().bookingRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingRequestVC' could not be loaded from storyboard 'Main' as 'BookingRequestVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().contactVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactVC' could not be loaded from storyboard 'Main' as 'ContactVC'.") }
        if _R.storyboard.main().couponContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'couponContainerVC' could not be loaded from storyboard 'Main' as 'CouponContainerVC'.") }
        if _R.storyboard.main().dateTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dateTimeVC' could not be loaded from storyboard 'Main' as 'DateTimeVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().leftMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftMenuVC' could not be loaded from storyboard 'Main' as 'LeftMenuVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().myBookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookingVC' could not be loaded from storyboard 'Main' as 'MyBookingVC'.") }
        if _R.storyboard.main().notififcationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notififcationVC' could not be loaded from storyboard 'Main' as 'NotififcationVC'.") }
        if _R.storyboard.main().optionSlotVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'optionSlotVC' could not be loaded from storyboard 'Main' as 'OptionSlotVC'.") }
        if _R.storyboard.main().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Main' as 'PaymentVC'.") }
        if _R.storyboard.main().pendingBillVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pendingBillVC' could not be loaded from storyboard 'Main' as 'PendingBillVC'.") }
        if _R.storyboard.main().presentCancelVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentCancelVC' could not be loaded from storyboard 'Main' as 'PresentCancelVC'.") }
        if _R.storyboard.main().presentDeleteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentDeleteVC' could not be loaded from storyboard 'Main' as 'PresentDeleteVC'.") }
        if _R.storyboard.main().referFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referFriendVC' could not be loaded from storyboard 'Main' as 'ReferFriendVC'.") }
        if _R.storyboard.main().savedAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'savedAddressVC' could not be loaded from storyboard 'Main' as 'SavedAddressVC'.") }
        if _R.storyboard.main().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'Main' as 'SignUpVC'.") }
        if _R.storyboard.main().termsNConditionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsNConditionVC' could not be loaded from storyboard 'Main' as 'TermsNConditionVC'.") }
        if _R.storyboard.main().walletContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletContainerVC' could not be loaded from storyboard 'Main' as 'WalletContainerVC'.") }
        if _R.storyboard.main().walletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletVC' could not be loaded from storyboard 'Main' as 'WalletVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
